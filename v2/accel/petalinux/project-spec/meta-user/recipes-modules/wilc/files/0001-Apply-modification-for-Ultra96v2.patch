From 45a3e536afa4482c8b78fdd1483b803f0b493570 Mon Sep 17 00:00:00 2001
From: t-kuha <imagingtechnerd@gmail.com>
Date: Sun, 26 Nov 2023 17:07:11 +0900
Subject: [PATCH] Apply modification for Ultra96v2

---
 Makefile   | 13 ++++++++++++-
 cfg80211.c | 10 ++++++++++
 netdev.c   |  1 +
 netdev.h   |  1 +
 power.c    |  6 ++++++
 sdio.c     |  6 +-----
 wlan.c     |  7 ++++++-
 wlan.h     |  4 ++--
 8 files changed, 39 insertions(+), 9 deletions(-)

diff --git a/Makefile b/Makefile
index 64c39aac134..5f8ff86b3c8 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 # SPDX-License-Identifier: GPL-2.0
-ccflags-y += -I$(src)/ -DWILC_DEBUGFS
+ccflags-y += -I$(src)/
 
 wilc-objs := cfg80211.o netdev.o mon.o \
 			hif.o wlan_cfg.o wlan.o sysfs.o power.o bt.o debugfs.o
@@ -11,3 +11,14 @@ wilc-sdio-objs += sdio.o
 obj-$(CONFIG_WILC_SPI) += wilc-spi.o
 wilc-spi-objs += $(wilc-objs)
 wilc-spi-objs += spi.o
+
+all:
+	$(MAKE) -C $(KERNEL_SRC) M=$(CURDIR) modules
+
+modules_install:
+	$(MAKE) -C $(KERNEL_SRC) M=$(CURDIR) modules_install
+
+clean:
+	rm -f *.o *~ core .depend .*.cmd *.ko *.mod.c
+	rm -f Module.markers Module.symvers modules.order
+	rm -rf .tmp_versions Modules.symversa
diff --git a/cfg80211.c b/cfg80211.c
index 96719d9c860..7411d371ca1 100644
--- a/cfg80211.c
+++ b/cfg80211.c
@@ -1954,6 +1954,15 @@ static int del_virtual_intf(struct wiphy *wiphy, struct wireless_dev *wdev)
 	    wdev->iftype == NL80211_IFTYPE_P2P_GO)
 		wilc_wfi_deinit_mon_interface(wl, true);
 	vif = netdev_priv(wdev->netdev);
+	pr_info("del_virtual_intf name[%s] vnum[%d], idx[%d], wilc-type[%d], nl-type[%d]\n",
+		vif->ndev->name, wl->vif_num, vif->idx, vif->iftype, wdev->iftype);
+	vif->monitor_flag = 0;
+
+	// If this interface was created by probe()->wilc_cfg80211_init(), then
+	// it was created when the driver was initialized. Only remove()->wilc_netdev_cleanup()
+	// shall be allowed to unregister this interface.
+	if (vif->primary_if) return 0;
+
 	cfg80211_unregister_netdevice(vif->ndev);
 	vif->monitor_flag = 0;
 
@@ -2193,6 +2202,7 @@ int wilc_cfg80211_init(struct wilc **wilc, struct device *dev, int io_type,
 		goto free_hq;
 	}
 
+	vif->primary_if = 1;
 	wilc_sysfs_init(wl);
 
 	return 0;
diff --git a/netdev.c b/netdev.c
index 5cc98adf56d..7d32fb91350 100644
--- a/netdev.c
+++ b/netdev.c
@@ -1291,6 +1291,7 @@ struct wilc_vif *wilc_netdev_ifc_init(struct wilc *wl, const char *name,
 	vif = netdev_priv(ndev);
 	ndev->ieee80211_ptr = &vif->priv.wdev;
 	strcpy(ndev->name, name);
+	vif->primary_if = 0;
 	vif->wilc = wl;
 	vif->ndev = ndev;
 	ndev->ml_priv = vif;
diff --git a/netdev.h b/netdev.h
index 443328dca3d..84d6e50a79b 100644
--- a/netdev.h
+++ b/netdev.h
@@ -202,6 +202,7 @@ struct wilc_vif {
 	u8 idx;
 	u8 iftype;
 	int monitor_flag;
+	int primary_if;
 	int mac_opened;
 	u32 mgmt_reg_stypes;
 	struct net_device_stats netstats;
diff --git a/power.c b/power.c
index 6c59e0bd10a..2d153c52f66 100644
--- a/power.c
+++ b/power.c
@@ -57,6 +57,12 @@ int wilc_of_parse_power_pins(struct wilc *wilc)
  */
 void wilc_wlan_power(struct wilc *wilc, bool on)
 {
+	pr_info("wifi_pm : %d\n", on);
+
+    // pr_info("WILC DRIVER SETUP TO NOT TOUCH CHIP_EN and RESETN!\n");
+
+    return;
+
 	if (!gpio_is_valid(wilc->power.gpios.chip_en) ||
 	    !gpio_is_valid(wilc->power.gpios.reset)) {
 		/* In case SDIO power sequence driver is used to power this
diff --git a/sdio.c b/sdio.c
index cb340466c45..f71be2eb80a 100644
--- a/sdio.c
+++ b/sdio.c
@@ -708,11 +708,7 @@ static int wilc_sdio_init(struct wilc *wilc, bool resume)
 		func->card->host->ios.clock);
 
 	/* Patch for sdio interrupt latency issue */
-	ret = pm_runtime_get_sync(mmc_dev(func->card->host));
-	if (ret < 0) {
-		pm_runtime_put_noidle(mmc_dev(func->card->host));
-		return ret;
-	}
+	pm_runtime_get_sync(mmc_dev(func->card->host));
 
 	init_waitqueue_head(&sdio_intr_waitqueue);
 	sdio_priv->irq_gpio = (wilc->io_type == WILC_HIF_SDIO_GPIO_IRQ);
diff --git a/wlan.c b/wlan.c
index 5d46c5c0b61..357bcfb82f2 100644
--- a/wlan.c
+++ b/wlan.c
@@ -805,6 +805,10 @@ static void chip_wakeup_wilc3000(struct wilc *wilc, int source)
 	do {
 		hif_func->hif_write_reg(wilc, wakeup_reg, wakeup_reg_val |
 							  wakeup_bit);
+        
+		/* Wait for the chip to stabilize*/
+        usleep_range(1000, 1100);
+
 		/* Check the clock status */
 		hif_func->hif_read_reg(wilc, clk_status_reg,
 				       &clk_status_reg_val);
@@ -815,7 +819,7 @@ static void chip_wakeup_wilc3000(struct wilc *wilc, int source)
 		 * If still off, redo the wake up sequence
 		 */
 		while ((clk_status_reg_val & clk_status_bit) == 0 &&
-		       (++trials % 4) != 0) {
+		       (++trials % 6) != 0) {
 			/* Wait for the chip to stabilize*/
 			usleep_range(1000, 1100);
 
@@ -1364,6 +1368,7 @@ int wilc_wlan_firmware_download(struct wilc *wilc, const u8 *buffer,
 	wilc->hif_func->hif_read_reg(wilc, WILC_GLB_RESET_0, &reg);
 	reg &= ~BIT(10);
 	ret = wilc->hif_func->hif_write_reg(wilc, WILC_GLB_RESET_0, reg);
+	msleep(200);
 	wilc->hif_func->hif_read_reg(wilc, WILC_GLB_RESET_0, &reg);
 	if (reg & BIT(10))
 		pr_err("%s: Failed to reset\n", __func__);
diff --git a/wlan.h b/wlan.h
index e3b67c9677c..847c108fd4b 100644
--- a/wlan.h
+++ b/wlan.h
@@ -244,8 +244,8 @@ static inline bool is_wilc3000(u32 id)
 #define WILC_RX_BUFF_SIZE	(96 * 1024)
 #define WILC_TX_BUFF_SIZE	(64 * 1024)
 
-#define GPIO_NUM_CHIP_EN	94
-#define GPIO_NUM_RESET		60
+#define GPIO_NUM_CHIP_EN	8
+#define GPIO_NUM_RESET		7
 
 #define NQUEUES			4
 #define AC_BUFFER_SIZE		1000
-- 
2.34.1

